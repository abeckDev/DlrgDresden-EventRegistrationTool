@page "/myevent"
@page "/myevent/{userId}/{eMail}"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavManager
@using System.Net.Http.Json
@using Newtonsoft.Json

@functions{
    [Parameter]
    public string userId { get; set; } = "";
    [Parameter]
    public string eMail { get; set; } = "";

}

<Breadcrumb>
    <BreadcrumbItem>
        <BreadcrumbLink To="">Startseite</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
        <BreadcrumbLink To="/myevent">Meine Anmeldung</BreadcrumbLink>
    </BreadcrumbItem>
</Breadcrumb>

<Row>
    <Column Margin="Margin.Is2.FromTop">
        <Text Class="text-center">
            <h2>Jahreshauptversammlung DLRG Bezirk Dresden e. V. - Online Anmeldung</h2>
        </Text>

        <Card>
            <CardBody>
                <CardText>
                    <Text>
                        Aufgrund der Coronaviruspandemie, wir die diesjährige Jahreshauptversammlung der DLRG Dresden
                        als Online Event stattfinden.
                        Um einen korrekten Ablauf der Veranstaltung gewährleisten zu können müssen nun zusätzliche Tools
                        für Abstimmung und Konferenz bereitgestellt werden.
                        Daher wird die Anmeldung zur Jahreshauptversammlung auch erstmalig online und automatisiert
                        stattfinden.
                    </Text>
                </CardText>
            </CardBody>
        </Card>
    </Column>
</Row>

<Row>
    <Column Margin="Margin.Is2.FromTop">
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Jahreshauptversammlung - Meine Anmeldung</CardTitle>
            </CardHeader>
            <CardBody>

                <CardText>
                    Auf dieser Seite werden alle von uns gespeicherten Informationen zu Ihrer Anmeldung angezeigt. Hier haben Sie auch die Möglichkeit Anpassungen durchzuführen.
                    <br />
                    @if (isAttendeeRegistrationValid)
                    {
                        <p>Die folgenden Informationen haben wir zur Ihrer anmeldung gefunden:</p>
                    }

                </CardText>
            </CardBody>

            @if (attendeeInformationLoaded == false)
            {
                <Loader />
            }
            else
            {

                @if (!isAttendeeRegistrationValid)
                {
                    <CardBody>
                        <Alert Color="Color.Danger" Visible="true">
                            <AlertDescription Class="text-center">
                                Wir konnte unter den angegebenen Informationen keine Anmeldung finden!
                                <br />
                                <Button Color="Color.Primary" Type="ButtonType.Link" To="/">Zur Startseite</Button>
                            </AlertDescription>
                        </Alert>
                    </CardBody>
                }
                else
                {

                    <CardBody>
                        <Container>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Vorname</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit @bind-Text="attendeeInformation.Name" Disabled="true" />
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Nachname</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit @bind-Text="attendeeInformation.Surname" Disabled="true" />
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Geburtsdatum</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <DateEdit @bind-Date="@birthday" TValue="DateTime?" Disabled="true" />
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">
                                    Email Adresse
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit @bind-Text="attendeeInformation.Email" Disabled="true">
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">Stadt</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit @bind-Text="attendeeInformation.City" Disabled="true" />
                                </FieldBody>
                            </Field>

                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.IsFull.OnTablet.Is2.OnDesktop">
                                    Postleitzahl
                                </FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is10.OnDesktop">
                                    <TextEdit @bind-Text="attendeeInformation.ZipCode" Disabled="true">
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                            <Check Checked="true" Disabled="true">
                                Mir ist bewusst, dass ich mich pro Mitgliedschaft und E-Mail Adresse nur einmal
                                registrieren kann.
                                Mein Stimmrecht darf nur durch mich ausgeübt werden und eine Weitergabe der Zugangsdaten
                                ist nicht erlaubt.
                            </Check>

                        </Container>
                    </CardBody>
                }
            }
        </Card>
    </Column>
</Row>


@if (isAttendeeRegistrationValid)
{
    <Row>
        <Column Margin="Margin.Is2.FromTop">
            <Card Margin="Margin.Is4.OnY">
                <CardHeader>
                    <CardTitle>Jahreshauptversammlung - Anmeldung bearbeiten</CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        Hier haben Sie die Möglichkeit Ihre Anmeldung zu bearbeiten und zu stornieren.
                        <br />
                        Bitte beachten Sie, dass eine Stornierung nur bis zum @metadataInformation.RegistrationDeadline.ToString("dd.MM.yyy") möglich ist.
                        @if (metadataInformation.IsRegistrationDeadlineReached)
                        {
                            <Strong>Eine Stornierung ist somit nicht mehr möglich!</Strong>
                        }
                    </CardText>
                </CardBody>
                <CardBody TextAlignment="TextAlignment.Center">
                    <Button Margin="Margin.Is2.FromTop" Color="Color.Secondary" Clicked="@PasswordReset" disabled="@isPasswortResetButtonDisabled" Loading="@isPasswortResetButtonLoading">
                        Zugangsdaten erneut versenden
                    </Button>
                    <Button Margin="Margin.Is2.FromTop.Is2.FromLeft" Color="Color.Primary" Clicked="@ShowModal" Disabled="@metadataInformation.IsRegistrationDeadlineReached">
                        Anmeldung stonieren
                    </Button>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

<Modal @ref="deleteRegistrationRef">
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Meine Registrierung stonieren</ModalTitle>
            <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody>
            <Paragraph>Möchten Sie Ihre Anmeldung wirklich stornieren?</Paragraph>
            <Paragraph>
                Sie werden danach keinen Zugriff mehr auf die Evenseite und die damit verbundenen Zugänge haben. Eine Stornierung ist nur bis zum Anmeldeschluss möglich. 
            </Paragraph>
            <Divider />
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Light" Clicked="@HideModal">Abbruch</Button>
            <Button Color="Color.Primary" @bind-Loading="@isCancelButtonLoading" Disabled="@isPasswortResetButtonDisabled" Clicked="@CancelRegistration"> Anmeldung stornieren!</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Snackbar @ref="snackbarSuccess" Color="SnackbarColor.Success">
    <SnackbarBody>
        Die gewünschte Aktion wurde ausgeführt!
    </SnackbarBody>
</Snackbar>
<Snackbar @ref="snackbarError" Color="SnackbarColor.Danger">
    <SnackbarBody>
        <strong>Fehler</strong> Beim ausführen der gewünschten Aktion ist ein Fehler aufgetreten!.
    </SnackbarBody>
</Snackbar>


@code {

    bool attendeeInformationLoaded = false;
    bool isAttendeeRegistrationValid = false;
    MyEventInformation attendeeInformation = new MyEventInformation();
    DateTime? birthday;
    MetadataInformation metadataInformation;

    Snackbar snackbarSuccess;
    Snackbar snackbarError;






    //Read Backend call and display informations
    protected override async Task OnInitializedAsync()
    {
        //Handle empty input
        if (userId == "" || eMail == "")
        {
            attendeeInformationLoaded = true;
            isAttendeeRegistrationValid = false;
            StateHasChanged();
        }

        metadataInformation = await GetMetaInformation();

        var response = await Http.GetAsync("GetMyEventInformationFunction?userId=" + userId + "&eMail=" + eMail);


        //Handle Get Error
        if (!response.IsSuccessStatusCode)
        {
            attendeeInformationLoaded = true;
            isAttendeeRegistrationValid = false;
            StateHasChanged();
        }


        //Bind response to Model
        attendeeInformation = await response.Content.ReadFromJsonAsync<MyEventInformation>();
        birthday = DateTime.Parse(attendeeInformation.Birthday);
        attendeeInformationLoaded = true;
        isAttendeeRegistrationValid = true;
        StateHasChanged();

    }


    private async Task<MetadataInformation> GetMetaInformation()
    {
        var response = await Http.GetFromJsonAsync<MetadataInformation>("EventMetadataFunction");
        response.IsLoaded = true;
        response.IsRegistrationDeadlineReached = GetIsDeadlineReached(response.RegistrationDeadline);
        response.IsRegistrationStartReached = IsRegistrationStartReached(response.RegistrationStart);
        return response;
    }

    private bool IsRegistrationStartReached(DateTime firstDate)
    {
        if (DateTime.Compare(firstDate, DateTime.Now) <= 0)
        {

            return true;
        }

        return false;
    }

    private bool GetIsDeadlineReached(DateTime firstDate)
    {
        if (DateTime.Compare(firstDate, DateTime.Now) < 0)
        {
            return true;
        }
        return false;
    }



    //Handle SelfService Buttons

    //Password Reset
    bool isPasswortResetButtonLoading;
    bool isPasswortResetButtonDisabled;
    async void PasswordReset()
    {
        //Disable the Button
        isPasswortResetButtonLoading = true;
        isPasswortResetButtonDisabled = true;

        //Call the backend Function

        var response = await Http.GetAsync("ResetUserCredentialsFunctions?userId=" + userId + "&eMail=" + eMail);

        isPasswortResetButtonDisabled = false;
        isPasswortResetButtonLoading = false;

        if (response.IsSuccessStatusCode)
        {
            snackbarSuccess.Show();
        }
        else
        {
            snackbarError.Show();
        }
        StateHasChanged();
    }

    //Delete stuff -> 
    Modal deleteRegistrationRef;
    bool isCancelButtonDisable = false;
    bool isCancelButtonLoading = false;


    async void CancelRegistration()
    {
        isCancelButtonDisable = true;
        isCancelButtonLoading = true;

        var response = await Http.GetAsync("UserCancelRegistrationFunction?userId="+userId+"&eMail="+eMail);
        isCancelButtonDisable = false;
        isCancelButtonLoading = false;
        if (response.IsSuccessStatusCode)
        {
            snackbarSuccess.Show();
            NavManager.NavigateTo("/");
        }
        else
        {
            snackbarError.Show();
        }
        StateHasChanged();

    }

    public void ShowModal()
    {
        deleteRegistrationRef.Show();
    }

    private void HideModal()
    {
        deleteRegistrationRef.Hide();
    }
}
